#!/bin/bash

. /usr/lib/hpkglib.sh
ERRCODE=0
usage(){
printf "\
$(i18n "hpkg-explode - rawly extract .hard archive")\n\
\n\
$(i18n "hpkg-explode [options] -p <package>")\n\
\n\
$(i18n "Options"):\n\
 -V | --version		$(i18n "Print version info and exit")\n\
 -h | --help | --usage	$(i18n "Print this text")\n\
 -v			$(i18n "Be verbose")\n\
 -s			$(i18n "Be silent")\n\
 -r | -R		$(i18n "Also extract PAYLOAD.tar.xz")\n\
 $(i18n "-C <directory>")	$(i18n "Extract in directory")\n\
 $(i18n "-p <package>")		$(i18n "Specify package to be extracted")\n\
\n\
$(i18n "More information available at hpkg-explode(1) manpage")\n\
$(i18n "Copyright and licensing information can be obtained via '--version' option")\n"
exit 0
}

[[ -z $* ]] && usage
{ [[ "$1" == "--usage" ]] || [[ "$1" == "--help" ]]; } && usage
[[ "$1" == "--version" ]] && version

while getopts ":vsrRhVC:p:" opt
do 
case $opt in
	v)
		VERBOSE="YES";;
	s)
		exec 1>&3
		exec 2>&3
		;;
	V)	
		version;;
	h)
		usage;;
	r|R)
		RECURSIVE="YES";;
	C)
		DIR="$OPTARG";;
	p)
		PKG="$OPTARG";;
	:)
		;& 
		# FALLTHROUGH
	*)	
		if 	[[ "$OPTARG" == "C" ]]; then # If there is -C option, not followed by DIR
			error "$(i18n "Option") \`-C\' $(i18n "requires") $(i18n "<directory> argument"). $(i18n "Consult a manpage or '--help' option")" "32"
		elif	[[ "$OPTARG" == "p" ]]; then # If there is -p option, not followed by PKG
			error "$(i18n "Option") \'-p\' $(i18n "requires") $(i18n "<package> argument"). $(i18n "Consult a manpage or '--help' option")" "32"
		else
			error "$(i18n "Unknown option"): -$OPTARG. $(i18n "Consult a manpage or '--help' option")" "32"
		fi
	;;

esac
done

[[ -z "$PKG" ]] && error "$(i18n "Package is not set"). $(i18n "Consult a manpage or '--help' option")" "32"
[[ -e "$PKG" ]] || error "$PKG: $(i18n "No such package")" "1"
[[ "$PKG" != *.hard ]] && error "\"$PKG\" $(i18n "is not a .hard package")" "1"
# int main()
FD1=1	
FD2=2
is_true "$VERBOSE" || { FD1=3; FD2=3; }
# If -v is not set - redirect 1 and 2 to 3 (supressed) 

pointer "$(i18n "Extracting")..."

gpg --verify "$PKG" 2>&${FD2} 1>&${FD1} || { warn "$(i18n "Package can not be verified")" && NOTSIGNED="YES"; }

mkdir ${PKG%.hard} &>/dev/null

is_true "$NOTSIGNED" || \
	{ gpg -d "$PKG" | tar xv -C ${PKG%.hard} | awk '{print "\033[34;1m -> \033[0m"$0;}' ;} 2>&${FD2} 1>&${FD1} 
is_true "$NOTSIGNED" && \
	{ cat "$PKG"	| tar xv -C ${PKG%.hard} | awk '{print "\033[34;1m -> \033[0m"$0;}' ;} 2>&${FD2} 1>&${FD1}
	
# Verifying and extracting package

is_true "$RECURSIVE" && {
	pointer "$(i18n "Extracting PAYLOAD")..."
	pushd ${PKG%.hard} &>/dev/null
	mkdir -p PAYLOAD
	{ tar xv --zstd -f PAYLOAD.tar.zst -C PAYLOAD | awk '{print "\033[34;1m -> \033[0m"$0;}'; } 2>&${FD2} 1>&${FD1} || { warn "PAYLOAD.tar $(i18n "is corrupted")"; ERRCODE=4; }
	rm -f PAYLOAD.tar.zst
	popd &>/dev/null
}	# If -r or -R is set - also unpacking PAYLOAD.tar

[[ -z "$DIR" ]] || {
	pointer "$(i18n "Moving to") $DIR..."
	mkdir -p "$DIR"
	cp -v ${PKG%.hard}/{*,.*} "$DIR/" 2>&${FD2} 1>&${FD1}
	is_true "$RECURSIVE" && cp -vR ${PKG%.hard}/PAYLOAD "$DIR/" 2>&${FD2} 1>&${FD1}
	rm -rf ${PKG%.hard}
}	# If $DIR is set - move files

exit "$ERRCODE"

	


