#!/bin/bash

. /usr/lib/hpkglib.sh
ERRCODE=0
usage(){
printf "\
$hpkg_explode_rawly_extract_hard_archive\n\
\n\
$hpkg_explode_desc\n\
\n\
$Options:\n\
 -V | --version		$print_version_info_and_exit\n\
 -h | --help | --usage	$print_this_help\n\
 -v			$be_verbose\n\
 -s			$be_silent\n\
 -r | -R		$also_extract_PAYLOAD_tar\n\
 $copt		$extract_in_dir\n\
 $popt		$package_to_be_extracted\n\
\n\
$More_information_available_at_hpkgexplode8\n\
$Copyright_and_licensing_information_available_with_option_version\n"
exit 0
}

[[ -z $* ]] && usage
{ [[ "$1" == "--usage" ]] || [[ "$1" == "--help" ]]; } && usage
[[ "$1" == "--version" ]] && version

while getopts ":vsrRhVC:p:" opt
do 
case $opt in
	v)
		VERBOSE="YES";;
	s)
		exec 1>&3
		exec 2>&3
		;;
	V)	
		version;;
	h)
		usage;;
	r|R)
		RECURSIVE="YES";;
	C)
		DIR="$OPTARG";;
	p)
		PKG="$OPTARG";;
	:)
		;& 
		# FALLTHROUGH
	*)	
		if 	[[ "$OPTARG" == "C" ]]; then # If there is -C option, not followed by DIR
			error "$Option \`-C\' $requires \`<DIR>\'. $Consult_usage_or_hpkg_explode8" "32"
		elif	[[ "$OPTARG" == "p" ]]; then # If there is -p option, not followed by PKG
			error "$Option \'-p\' $requires \`<PKG>\'. $Consult_usage_or_hpkg_explode8" "32"
		else
			error "$Unknown_option: -$OPTARG. $Consult_usage_or_hpkg_explode8" "32"
		fi
	;;

esac
done

[[ -z "$PKG" ]] && error "$Package $is_not_set. $Consult_usage_or_hpkg_explode8" "32"
[[ -e "$PKG" ]] || error "$Package \"$PKG\" $does_not_exist" "1"
[[ "$PKG" != *.hard ]] && error "\"$PKG\" $is_not_a_hard_package" "1"
# int main()
FD1=1	
FD2=2
is_true "$VERBOSE" || { FD1=3; FD2=3; }
# If -v is not set - redirect 1 and 2 to 3 (supressed) 

pointer "$Extracting..."

gpg --verify "$PKG" 2>&${FD2} 1>&${FD1} || { warn "$Package_cannot_be_verified" && NOTSIGNED="YES"; }

mkdir ${PKG%.hard} &>/dev/null

is_true "$NOTSIGNED" || \
	{ gpg -d "$PKG" | tar xv -C ${PKG%.hard} | awk '{print "\033[34;1m -> \033[0m"$0;}' ;} 2>&${FD2} 1>&${FD1} 
is_true "$NOTSIGNED" && \
	{ cat "$PKG"	| tar xv -C ${PKG%.hard} | awk '{print "\033[34;1m -> \033[0m"$0;}' ;} 2>&${FD2} 1>&${FD1}
	
# Verifying and extracting package

is_true "$RECURSIVE" && {
	pointer "$Extracting_PAYLOAD..."
	pushd ${PKG%.hard} &>/dev/null
	mkdir -p PAYLOAD
	{ tar xvJf PAYLOAD.tar.xz -C PAYLOAD | awk '{print "\033[34;1m -> \033[0m"$0;}'; } 2>&${FD2} 1>&${FD1} || { warn "PAYLOAD.tar $is_corrupted"; ERRCODE=4; }
	rm -f PAYLOAD.tar.xz
	popd &>/dev/null
}	# If -r or -R is set - also unpacking PAYLOAD.tar

[[ -z "$DIR" ]] || {
	pointer "$Moving_to $DIR..."
	mkdir -p "$DIR"
	cp -v ${PKG%.hard}/{*,.*} "$DIR/" 2>&${FD2} 1>&${FD1}
	is_true "$RECURSIVE" && cp -vR ${PKG%.hard}/PAYLOAD "$DIR/" 2>&${FD2} 1>&${FD1}
	rm -rf ${PKG%.hard}
}	# If $DIR is set - move files

exit "$ERRCODE"

	


