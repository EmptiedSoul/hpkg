#!/bin/bash

. /usr/lib/hpkglib.sh

_cleanup(){
	rm -f $PKGDEC $PKGMET
}

usage(){
printf "\
$(i18n "hpkg-info - obtain information about .hard package")\n\
\n\
$(i18n "hpkg-info [options] -p <package>")\n\
\n\
$(i18n "Options"):\n\
  -V | --version	$(i18n "Print version info and exit")\n\
  -h | --help | --usage	$(i18n "Print this help")\n\
  -d			$(i18n "Dump entire METADATA file")\n\
  -a			$(i18n "Print as \"KEY=VALUE\"")\n\
  $(i18n "-k <key>")		$(i18n "Specify key to obtain")\n\
  $(i18n "-o <file>")		$(i18n "Specify output (default stdout)")\n\
\n\
$(i18n "More information available at hpkg-info(1) manpage")\n\
$(i18n "Copyright and licensing information can be obtained via '--version' option")\n"
exit 0
}

[[ -z "$*" ]] && usage
{ [[ "$1" == "--usage" ]] || [[ "$1" == "--help" ]]; } && usage
[[ "$1" == "--version" ]] && version

while getopts ":Vhdak:o:p:" opt
do
case $opt in
	V)	version;;
	h)	usage;;
	d)	DUMP="YES";;
	a)	ALL="YES";;
	k)	KEY="$OPTARG";;
	o)	exec 1>$OPTARG;;
	p)	PKG="$OPTARG";;
	:)	;& # FALLTHROUGH
	*)	case "$OPTARG" in
			k)	error "$(i18n "Option") \'-k\' $(i18n "requires") $(i18n "<key> argument"). $(i18n "Consult a manpage or '--help' option")" "32" ;;
			o)	error "$(i18n "Option") \'-o\' $(i18n "requires") $(i18n "<file> argurment"). $(i18n "Consult a manpage or '--help' option")" "32" ;;	
			p)	error "$(i18n "Option") \'-p\' $(i18n "requires") $(i18n "<package> argument"). $(i18n "Consult a manpage or '--help' option")" "32" ;;
			*)	error "$(i18n "Unknown option"): -$OPTARG. $(i18n "Consult a manpage or \`--help\' option")" "32" ;;
		esac
	;;
esac
done 

{ [[ -z "$KEY" ]] && [[ -z "$DUMP" ]]; } && {
	error "$(i18n "You should specify a key to obtain")" "32"
}

[[ -z "$PKG" ]] && error "$(i18n "Package is not set"). $(i18n "Consult a manpage or '--help' option")" "32"
[[ -e "$PKG" ]] || error "$PKG: $(i18n "No such package")" "1"
[[ "$PKG" != *.hard ]] && error "\"$PKG\" $(i18n "is not a .hard package")" "1"

PKGDEC="/tmp/${RANDOM}${PKG##*/}.decrypted"
PKGMET="/tmp/${RANDOM}${PKG##*/}.metadata"

FD2=3
FD1=3

gpg --verify "$PKG" 2>&${FD2} 1>&${FD1} || { warn "$(i18n "Package can not be verified")" && NOTSIGNED="YES"; }

is_true "$NOTSIGNED" || \
	{ gpg -d "$PKG" > "$PKGDEC"; tar xvf "$PKGDEC" METADATA -O > "$PKGMET" || CORRUPTED="YES"; } 2>&3 2>&3
is_true "$NOTSIGNED" && \
	{ cat    "$PKG" > "$PKGDEC"; tar xvf "$PKGDEC" METADATA -O > "$PKGMET" || CORRUPTED="YES"; } 2>&3 2>&3

is_true "$CORRUPTED" && error "$(i18n "Package is corrupted")" "4"

is_true "$DUMP" && {
	cat $PKGMET
	rm $PKGDEC $PKGMET
	exit
}
. "$PKGMET" || error "$(i18n "Package is corrupted")" "4"

rm $PKGDEC $PKGMET

is_true "$ALL" && \
	echo $KEY=$(eval echo \${$KEY}) || \
	eval echo \${$KEY}

_cleanup
exit 0
