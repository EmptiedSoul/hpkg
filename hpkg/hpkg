#!/bin/bash

log(){
	local DATE=$(date)
	printf "[ %s ] %s\n" "$DATE" "$1" >> /var/log/packages
}

. /usr/lib/hpkglib.sh
ERRCODE=0
usage(){
printf "\
$(i18n "hpkg - install .hard package")\n\
\n\
$(i18n "hpkg [options] -p <package>")\n\
\n\
$(i18n "Options"):\n\
  -V | --version	$(i18n "Print version info and exit")\n\
  -h | --help | --usage $(i18n "Print this help")\n\
  -v			$(i18n "Be verbose")\n\
  -s			$(i18n "Be silent")\n\
  -d			$(i18n "Install as dependency")\n\
  -n			$(i18n "Disable hooks")\n\
  -f			$(i18n "Do not resolve dependencies and conflicts")
  -P			$(i18n "Do not really install package")\n\
  $(i18n "-C <directory>")	$(i18n "Install in <directory>")\n\
  $(i18n "-p <package>")		$(i18n "Specify package to install")\n\
\n\
$(i18n "More information available at hpkg(8) manpage")\n\
$(i18n "Copyright and licensing information can be obtained via '--version' option")\n"
exit 0
}

[[ -z "$*" ]] && usage
{ [[ "$1" == "--usage" ]] || [[ "$1" == "--help" ]]; } && usage
[[ "$1" == "--version" ]] && version

while getopts ":vsdnfhPVC:p:" opt
do
case $opt in
	v)
		VERBOSE="YES";;
	s)
		exec 1>&3
		exec 2>&3
		;;
	f)
		SLACK="YES";;
	V)
		version;;
	h)
		usage;;
	P)
		PRETEND="YES";;
	d)
		ASDEP="YES";;
	n)
		NOHOOK="YES";;
	C)
		ROOT="$OPTARG";;
	p)
		PKG="$OPTARG";;
	:)
		;& # FALLTHROUGH
	*)
		if	[[ "$OPTARG" == "C" ]]; then # If there is -C option, not followed by DIR
			error "$(i18n "Option") \'-C\' $(i18n "requires") $(i18n "<directory> argument"). $(i18n "Consult a manpage or '--help' option")" "32"
		elif	[[ "$OPTARG" == "p" ]]; then # If there is -p option, not followed by PKG
			error "$(i18n "Option") \'-p\' $(i18n "requires") $(i18n "<package> argument"). $(i18n "Consult a manpage or '--help' option")" "32"
		else
			error "$(i18n "Unknown option"): -$OPTARG. $(i18n "Consult a manpage or '--help' option")" "32"
		fi
	;;
esac
done

[[ -z "$PKG" ]] && error "$(i18n "Package is not set"). $(i18n "Consult a manpage or '--help' option")" "32"
[[ -e "$PKG" ]] || error "$PKG: $(i18n "No such package")" "1"
[[ "$PKG" != *.hard ]] && error "\"$PKG\" $(i18n "is not a .hard package")" "1"
is_true "$PRETEND" || {
	[[ "$UID" != "0" ]] && error "$(i18n "You need root permissions for this action")" "32" 
}
# int main()
FD1=1
FD2=2
is_true "$VERBOSE" || { FD1=3; FD2=3; } # Supress FDs if -v is not passed

pointer "$(i18n "Reading metadata")..."

PKGDEC="/tmp/${RANDOM}${PKG##*/}.decrypted"
PKGMET="/tmp/${RANDOM}${PKG##*/}.metadata"

gpg --verify "$PKG" 2>&${FD2} 1>&${FD1} || { warn "$(i18n "Package can not be verified")" && NOTSIGNED="YES"; }

is_true "$NOTSIGNED" || \
	{ gpg -d "$PKG" > "$PKGDEC"; tar xvf "$PKGDEC" METADATA -O > "$PKGMET" || CORRUPTED="YES"; } 2>&${FD2} 1>&${FD1}
is_true "$NOTSIGNED" && \
	{ cat    "$PKG" > "$PKGDEC"; tar xvf "$PKGDEC" METADATA -O > "$PKGMET" || CORRUPTED="YES"; } 2>&${FD2} 1>&${FD1}


is_true "$CORRUPTED" && error "$(i18n "Package is corrupted")" "4"
. "$PKGMET" || error "$(i18n "Package is corrupted")" "4"

is_true "$SLACK" && warn "$(i18n "Dependency tracking disabled")"
is_true "$SLACK" || {

for dependency in "${DEPENDS[@]}"
do
	{ [[ -f "$ROOT/var/hpkg/packages-provides/*/$dependency" ]] || [[ -f "$ROOT/var/hpkg/packages/$dependency" ]]; } || {
		{ is_true "$PRETEND" || ${HARDMAN_NON_INTERACTIVE_INSTALL} $dependency; } || error "$(i18n "Can not resolve dependency"): $dependency $(i18n "needed for") $PKGNAME" "8" 
	}

done

for conflict in "${CONFLICTS[@]}"
do
	[[ -f "$ROOT/var/hpkg/packages/$conflict" ]] && error "$(i18n "Conflict"): $conflict"
done

[[ -f "$ROOT/var/hpkg/packages-conflicts/*/$PKGNAME" ]] && \
error "$(i18n "Installed package conflicts with $PKGNAME")" "16"
}

is_true "$PRETEND" && exit

type pkg_preinstall 1>&${FD1} 2>&${FD2} && { pointer "$(i18n "Running 'pkg_preinstall'")"; pkg_preinstall || warn "$(i18n "'pkg_preinstall' exited with non-zero code")"; }

pointer "$(i18n "Installing package")..."

{ tar xvf "$PKGDEC" PAYLOAD.tar.zst -O | tar xpv --zstd -C "$ROOT" --numeric-owner > $ROOT/var/hpkg/installed-files/$PKGNAME-$VERSION.list; } 2>&${FD2} 1>&${FD1} && { 	  	
	cp $PKGMET  $ROOT/var/hpkg/packages/$PKGNAME
	
	mkdir -p $ROOT/var/hpkg/packages-dependencies/$PKGNAME
	pushd $_
	touch ${DEPENDS[@]} 
	popd

	mkdir -p $ROOT/var/hpkg/packages-conflicts/$PKGNAME
	pushd $_
	touch ${CONFLICTS[@]} 
	popd

	mkdir -p $ROOT/var/hpkg/packages-provides/$PKGNAME
	pushd $_
	touch ${PROVIDES[@]} 
	popd

	is_true "$ASDEP" && ln -sv $ROOT/var/hpkg/packages/$PKGNAME $ROOT/var/hpkg/as-dep/$PKGNAME

} 2>&${FD2} 1>&${FD1}

log "installed $PKGNAME"
 
is_true "$NOHOOK" || {
	pointer "$(i18n "Running hooks")..."
	for hook in "$(ls -1 $ROOT/etc/hpkg/hooks/*.hook)"
	do
		$hook || warn "$(i18n "Hook exited with non-zero code"): $hook"
	done
} 

type pkg_postinstall 1>&${FD1} 2>&${FD2}&& { pointer "$(i18n "Running 'pkg_postinstall'")..."; pkg_postinstall || warn "$(i18n "'pkg_postinstall' exited with non-zero code")"; }

exit 0;

