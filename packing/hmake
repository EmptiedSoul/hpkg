#!/bin/bash

#DEBUG=YES

. /usr/lib/hpkglib.sh

CONFIGUREOPTS="--prefix=/usr --sysconfdir=/etc"
MAINTAINER="$(whoami)@$(hostname)"

. /etc/hpkg/make.conf

#[[ "$UID" == 0 ]] || error "$_root_or_fakeroot" "32" 

FD1="1"
exec 5>/var/log/hmake

is_true "$DEBUG" || FD1="5"

__getsrc()	{	true;	}
__unpacksrc()	{	true;	}
__preparesrc()	{	true;	}
__compilesrc()	{	true;	}
__installsrc()	{	false;	}

usage(){
printf "\
$_hmake_make_hards\n\
\n\
$_hmake_synt\n\
\n\
$Options:\n\
  build		$_hmake_build\n\
  pack		$_hmake_pack\n\
  clean		$_hmake_clean\n\
  build_clean	$_hmake_build_clean\n\
  mrproper	$_hmake_mrproper\n\
  install	$_hmake_install\n\
\n\
$More_information_available_at_hmake8\n\
$Copyright_information_available_with_option_version\n"
exit 0
}

strip_result(){
	local save_lib="ld* libc*o libpthread* libthread_db*"
	pushd $DEST/lib
		for LIB in $save_lib; do
			objcopy --only-keep-debug $LIB $LIB.dbg
			strip --strip-unneeded $LIB
			objcopy --add-gnu-debuglink=$LIB.dbg $LIB
		done
	popd
	local save_usr_lib="libquadmath* libstdc++* libitm* libatomic*"
	pushd $DEST/usr/lib
		for LIB in $save_usr_lib; do
			objcopy --only-keep-debug $LIB $LIB.dbg
			strip --strip-unneeded $LIB
			objcopy --add-gnu-debuglink=$LIB.dbg $LIB
		done
	popd
	unset LIB save_lib save_usr_lib
	find $DEST/usr/lib $DEST/lib -type f -name "*.a" \
		-exec strip --strip-debug {} ';'
	find $DEST/usr/lib $DEST/lib -type f -name "*.so*" ! -name "*dbg" \
		-exec strip --strip-unneeded {} ';'
	find $DEST/{bin,sbin} $DEST/usr/{bin,sbin,libexec} -type f \
		-exec strip --strip-all {} ';'
	find $DEST/ -type f -name "*.la" \
		-delete
}

pack(){
	pushd $PACKAGEDIR
		echo "#!/bin/bash"			>> METADATA
		echo "PKGNAME=\"$PACKAGE\""		>> METADATA
		echo "VERSION=\"$VER\""			>> METADATA
		echo "DESCRIPTION=\"$DESCRIPTION\""	>> METADATA
		echo "MAINTAINER=\"$MAINTAINER\""	>> METADATA
		echo "DEPENDS=(${DEPENDS[@]})"		>> METADATA
		echo "CONFLICTS=(${CONFLICTS[@]})"	>> METADATA
		echo "PROVIDES=(${PROVIDES[@]})"	>> METADATA
		type pkg_preinstall 	|& sed '1d'	>> METADATA
		type pkg_postinstall 	|& sed '1d'	>> METADATA
		type pkg_preremove	|& sed '1d'	>> METADATA
		type pkg_postremove	|& sed '1d'	>> METADATA
		
		tar cv --numeric-owner --owner=0 --group=0 -f $PACKAGE.hard METADATA
		tar --append -f $PACKAGE.hard PAYLOAD.tar.xz

		gpg -s $PACKAGE.hard
		mv $PACKAGE.hard.gpg ${PACKAGE}_${VER}.hard

		rm PAYLOAD.tar.xz
	popd &>/dev/null
}

build(){
	. ./Buildfile || error "$_cannot_source_buildfile" "32"
	{ [[ -z "$PACKAGE" ]] || \
	  [[ -z "$VER" ]]; } && error "$_invalid_buildfile" "32"
	declare -xf __installsrc
	declare -xf __compilesrc
	declare -xf strip_result
	declare -xf error
	declare -xf pointer
	declare -xf warn
	declare -xf is_true
	PACKAGEDIR="$DISTDIR/$PACKAGE"
	DEST="$PACKAGEDIR/root"
	BUILDDIR="$PACKAGEDIR/build"
	export DISTDIR
	export PACKAGE
	export PACKAGEDIR
	export DEST
	export BUILDDIR
	export MAKEOPTS
	export FD1
	export SRCDIR CONFIGUREOPTS
	export _stripping _cannot_install_into_package _cannot_strip _creating_package _cannot_pack_payload _cannot_compile_source failing_due_previous_errors
	export POINTERCOLOR WARNCOLOR CLRCOLOR
	mkdir -p $DEST $BUILDDIR
	pushd $BUILDDIR &>/dev/null
	pointer "$_running_getsrc..."
	__getsrc 1>&${FD1} 2>&${FD1} || error "$_cannot_get_sources" "1"
	pointer "$_running_unpacksrc..." 
	__unpacksrc 1>&${FD1} 2>&${FD1} || error "$_cannot_unpack_sources" "1"
	pushd $SRCDIR &>/dev/null
	pointer "$_running_preparesrc..."
	__preparesrc 1>&${FD1} 2>&${FD1} || error "$_cannot_prepare_source" "1"
	pointer "$_running_compilesrc..."
	popd &>/dev/null
	popd &>/dev/null
	fakeroot <<EOF
	pushd $BUILDDIR &>/dev/null
	pushd $SRCDIR	&>/dev/null
	__compilesrc 1>&${FD1} 2>&${FD1} || error "$_cannot_compile_source" "1"
	pointer "$_running_installsrc..."
	__installsrc 	1>&${FD1} 2>&${FD1} || error "$_cannot_install_into_package" "1"
	pointer "$_stripping..." 
	strip_result 	1>&${FD1} 2>&${FD1} || error "$_cannot_strip" "1"
	popd 		&>/dev/null
	popd 		&>/dev/null
	pointer "$_creating_package..."
	pushd $DEST 	&>/dev/null
		tar cvpJf $PACKAGEDIR/PAYLOAD.tar.xz . 1>&${FD1} 2>&${FD1} || error "$_cannot_pack_payload" "1"
	popd 		&>/dev/null
EOF
	pack 		1>&${FD1} 2>&${FD1} || error "$_cannot_create_package" "1"
}

clean(){
	. ./Buildfile || error "$_cannot_source_buildfile" "32"
	PACKAGEDIR="$DISTDIR/$PACKAGE"
	DEST="$PACKAGEDIR/root"
	BUILDDIR="$PACKAGEDIR/build"
	rm -rf $BUILDDIR
	rm -rf $DEST
}

build_clean(){
	. ./Buildfile || error "$_cannot_source_buildfile" "32"
	PACKAGEDIR="$DISTDIR/$PACKAGE"
	DEST="$PACKAGEDIR/root"
	BUILDDIR="$PACKAGEDIR/build"
	rm -rf $BUILDDIR
}

mrproper(){
	. ./Buildfile || error "$_cannot_source_buildfile" "32"
	PACKAGEDIR="$DISTDIR/$PACKAGE"
	DEST="$PACKAGEDIR/root"
	BUILDDIR="$PACKAGEDIR/build"
	rm -rf $PACKAGEDIR
}

[[ -z "$*" ]] && usage
{ [[ "$1" == "--help" ]] || [[ "$1" == "--usage" ]]; } && usage
[[ "$1" == "--version" ]] && version


case $1 in 
	build)	build;;
	pack)
		cd $2
		{
			. ./METADATA || error "$_cannot_source_metadata" "32"
			tar cvf "package.tar" METADATA
			cd root
			tar cvpJf ../PAYLOAD.tar.xz .
			cd ..
			tar --append -f package.tar PAYLOAD.tar.xz
			gpg -s package.tar
			mv package.tar.gpg ../${PKGNAME}_${VER}.hard
		} >&${FD1}
		cd ..
		exit 0;;
	install)
		. ./Buildfile || error "$_cannot_source_buildfile" "32"
		hpkg -p $DISTDIR/$PKGNAME/*.hard || error $_cannot_install_package "1";;
	clean) 		clean;;
	build_clean) 	build_clean;;
	mrproper) 	mrproper;;
esac

